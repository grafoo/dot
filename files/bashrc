# If not running interactively, don't do anything
[[ $- != *i* ]] && return

aliases=(
  l
  ll
  la
  lt
  lr
  rr
  virtualenv
  emacs
  emd
  emc
  less
  ..
  ...
  grepp
)

for a in "${aliases[@]}"
do
  unalias "$a" 2>/dev/null
done

unset l
l() {
  case "$#" in
    0)
      ls --color -l | \
        awk '
          NR > 1 {
            printf("%s ", $1)
            for(i = 9; i <= NF; i++) {
              if(i == NF) {
                print $i
              } else {
                printf("%s ", $i)
              }
            }
          }
        '
      ;;
    1)
      ls --color -l "$1" | \
        awk '
          NR > 1 {
            printf("%s ", $1)
            for(i = 9; i <= NF; i++) {
              if(i == NF) {
                print $i
              } else {
                printf("%s ", $i)
              }
            }
          }
        '
      ;;
    *)
      declare arg
      for arg in "$@"
      do
        echo "-> ${arg}"
        ls --color -l "$arg" | \
          awk '
            NR > 1 {
              printf(" %s ", $1)
              for(i = 9; i <= NF; i++) {
                if(i == NF) {
                  print $i
                } else {
                  printf("%s ", $i)
                }
              }
            }
            END { printf("\n") }
          '
      done
      ;;
  esac
}
export -f l
alias ll='ls --color -l'
alias la='ls --color -la'
alias lt='ls --color -lth'
alias lr='ls --color -lrh'

alias rr='rm -rf'

unset rpmx
rpmx() {
  [[ "$1" =~ ^.*\.rpm$ ]] ||
    exit 1
  local rpm_dir="${1}.d"
  mkdir "$rpm_dir"
  cd "$rpm_dir"
  rpm2cpio "../${1}" | cpio -idv
}
export -f rpmx

unset rpmrequires
rpmrequires() {
  repoquery --requires --resolve --pkgnarrow=all "$1" |
    tee >(xargs -r -n 1 -- repoquery --requires --resolve --pkgnarrow=all) |
    sort |
    uniq
}
export -f rpmrequires

unset rpmq
rpmq() {
  test -n "$1" &&
    rpm -qa | grep "$1"
}
export -f rpmq

# use virtualenv of python2 when on archlinux
which virtualenv2 >/dev/null 2>&1 && alias virtualenv='virtualenv2'

alias emacs='emacs --no-window-system'
alias emd='emacs --daemon'
alias emc='emacsclient -nw'

unset nx
nx() {
  case "$1" in
    -s)
      nix-env -qaP ".*${2}.*"
      ;;
  esac
}
export -f nx

start_ssh_agent() {
  (ssh-add -l > /dev/null 2>&1) ||
    {
      test -S "/tmp/.ssh-agent.${USER}.sock" ||
        eval $(ssh-agent -a "/tmp/.ssh-agent.${USER}.sock" -s)

      ssh-add -l > /dev/null 2>&1
      test $? -eq 2 &&
        export SSH_AUTH_SOCK="/tmp/.ssh-agent.${USER}.sock"

      ssh-add -l > /dev/null 2>&1
      test $? -eq 1 &&
        ssh-add
    }
}

unset ldw
ldw() {
  test -z "$1" &&
    exit 1
  ldd $(which "$1")
}
export -f ldw

unset dus
dus() {
  path="$1"
  test $(echo "$path" | rev | cut -c 1) = / ||
    path="${path}/"
  du -sh "${path}"* | sort -h
}
export -f dus

unset ssh_master_exit_all
ssh_master_exit_all() {
  local _s
  local _glob="${HOME}/.ssh/cmskt.*"
  for _s in ~/.ssh/cmskt.*; do
    test "$_s" != "$_glob" &&
      ssh -O exit $(echo "$_s" | cut -d '.' -f 3- | cut -d '.' -f 2-)
  done
}
export -f ssh_master_exit_all

unset sshchckcm
sshchckcm() {
   ssh -O check "$1"
}
export -f sshchckcm

unset yumvars
yumvars() {
  python -c 'import yum, pprint; yb = yum.YumBase(); pprint.pprint(yb.conf.yumvar, width=1)'
}
export -f yumvars

# TODO
# unset clc
# clc() {
#     awk -v expression="$1" 'BEGIN{printf("%f\n", expression)}'
# }
# export -f clc

unset gitbsu
gitbsu() {
    git branch -vv | grep -o '.*]'
}
export -f gitbsu

unset pvdisplay_vg_uuid
pvdisplay_vg_uuid() {
    sudo pvdisplay --columns --options pv_name,vg_name,vg_uuid
}
export -f pvdisplay_vg_uuid

#unset change-commit-msg
#git-change-commit-msg(){
#  commit="$1"
#  newmsg="$2"
#  branch="master"
#  git checkout $commit
#  git commit --amend -m "$newmsg"
#  git cherry-pick $commit..$branch
#  git branch -f $branch
#  git checkout $branch
#}
#export -f git-change-commit-msg

unset mvlstdwnhere
mvlstdwnhere() {
mv $(ls -lrt ~/Downloads | tail -n1 | awk -vhome=$HOME '{print home"/Downloads/"$NF}') ./
}
export -f mvlstdwnhere

unset get_x_display
get_x_display() {
ps -CXorg -o'%a'|perl -ane 'foreach $arg (@F){if ($arg =~ /:\d+/) {print $arg}}'
}
export -f get_x_display

unset start_x11vnc
start_x11vnc() {
  local _display=$(get_x_display)
  nohup x11vnc -display "$_display" >/dev/null 2>&1 &
  if test $? = 0; then
    echo "connect with vncviewer $(nslookup $(hostname -f)|grep -A1 'Name:'|tail -n1|cut -d: -f2)${_display}"
  else
    echo "something went wrong"
  fi
}
export -f start_x11vnc

unset list_docker_tags
list_docker_tags() {
  type -p curl && type -p jq || exit 1
  curl -L "https://registry.hub.docker.com/v1/repositories/${1}/tags" | jq
}
export -f list_docker_tags

alias less='less --RAW-CONTROL-CHARS'
# alias ..='cd ..'
shopt -s autocd                 # will work for .. as well
alias ...='cd ../..'
alias grepp='grep --color=auto --perl-regexp'
alias grepi='grep --color=auto --ignore-case'
alias mpv_audio-channels_stereo='mpv --audio-channels=stereo'
alias gpg-kill-agent='gpgconf --kill gpg-agent'
alias download-firefox='curl -Lo firefox.tar.bz2 "https://download.mozilla.org/?product=firefox-latest-ssl&os=linux64&lang=en-US"'
alias ssh-no-pubkey='ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no'

start_ssh_agent

if test -n "$GUIX_ENVIRONMENT"; then
    export PS1='[guix] \h \W> '
else
# source virtualenvwrapper
#test -n "$WORKON_HOME" &&
#  test -n "$PROJECT_HOME" &&
  test -f "${HOME}/.local/bin/virtualenvwrapper.sh" &&
  . "${HOME}/.local/bin/virtualenvwrapper.sh"

# bash completion
test -f /usr/share/bash-completion/bash_completion &&
  . /usr/share/bash-completion/bash_completion
    export PS1='\h \W> '
fi
