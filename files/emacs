;;; .emacs --- silence flycheck

;;; Commentary:
;; ...where the magic is happening

;;; Code:

;; performance improvement when displaying long lines
(setq-default bidi-display-reordering nil)

;; https://www.emacswiki.org/emacs/ToggleWindowSplit
(defun toggle-window-split ()
  "Transpose a vertical/horizontal window split."
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
	     (next-win-buffer (window-buffer (next-window)))
	     (this-win-edges (window-edges (selected-window)))
	     (next-win-edges (window-edges (next-window)))
	     (this-win-2nd (not (and (<= (car this-win-edges)
					 (car next-win-edges))
				     (<= (cadr this-win-edges)
					 (cadr next-win-edges)))))
	     (splitter
	      (if (= (car this-win-edges)
		     (car (window-edges (next-window))))
		  'split-window-horizontally
		'split-window-vertically)))
	(delete-other-windows)
	(let ((first-win (selected-window)))
	  (funcall splitter)
	  (if this-win-2nd (other-window 1))
	  (set-window-buffer (selected-window) this-win-buffer)
	  (set-window-buffer (next-window) next-win-buffer)
	  (select-window first-win)
	  (if this-win-2nd (other-window 1))))))

(add-hook 'ediff-prepare-buffer-hook #'show-all)

(add-to-list 'auto-mode-alist '("\\.cu\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("SConstruct" . python-mode))
(add-to-list 'auto-mode-alist '("SConscript" . python-mode))


;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.

(package-initialize)
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/") t)
(unless (package-installed-p 'use-package)
    (progn
      (package-refresh-contents nil)
      (package-install 'use-package)))
(package-refresh-contents t)

(use-package ace-window
  :ensure t
  :bind ("M-o" . ace-window)
  :config
  (setq aw-dispatch-always t)
  (setq aw-keys '(?f ?j ?d ?k ?s ?l ?a ?g ?h)))

(use-package clang-format
  :ensure t
  :init (add-hook 'c-mode-common-hook
                  '(lambda ()
                     (add-hook 'before-save-hook
                               '(lambda ()
                                  (when
                                      (or (eq major-mode 'c-mode)
                                          (eq major-mode 'c++-mode))
                                    (clang-format-buffer)))))))

(use-package company
  :ensure t
  :config (global-company-mode)
  :bind ("C-c f" . company-files))

(use-package company-quickhelp
  :ensure t
  :config (company-quickhelp-mode))



(use-package elpy
  :ensure t
  :init (add-hook 'elpy-mode-hook
                  '(lambda ()
                     (add-hook 'before-save-hook #'elpy-format-code)))
  :config (elpy-enable))

(use-package expand-region
  :ensure t
  :bind ("M-i" . er/expand-region))

(use-package flx-ido
  :ensure t
  :config (flx-ido-mode))

(use-package flycheck
  :ensure t
  :config (global-flycheck-mode))

(use-package gruvbox-theme
  :ensure t
  :config (load-theme 'gruvbox-light-medium t))

(use-package magit
  :ensure t
  :bind ("C-c g" . magit-status))

(use-package multiple-cursors
  :ensure t
  :bind (("C-c c i" . mc/edit-lines)
         ("C-c c a" . mc/edit-beginnings-of-lines)
         ("C-c c e" . mc/edit-ends-of-lines)))

(use-package python
  :ensure t
  :config (setq gud-pdb-command-name "python -m pdb"))

(use-package rust-mode
  :ensure t
  ;; rustfmt installation:
  ;; cargo install rustfmt
  :config (setq rust-format-on-save t)
  )

;; (use-package flycheck-rust)

(use-package go-mode
  :ensure t)
(use-package go-eldoc
  :ensure t)
;; (use-package go-autocomplete)


;; (use-package haskell-mode)

;; (use-package indent-guide)

;; ;; show org-mode bullets as utf-8 characters
;; ;; example screenshot at https://github.com/sabof/org-bullets/raw/master/screenshot.png
;; (use-package org-bullets
;;   :init (add-hook 'org-mode-hook
;;                   #'(org-bullets-mode)))


;; (use-package perspective)

;; (use-package projectile)
;; (use-package persp-projectile)

;; (use-package restclient)

;; (use-package wrap-region)		;TODO: checkout

(use-package browse-kill-ring
  :ensure t
  :bind (("C-c y" . browse-kill-ring)))

(use-package tuareg
  :ensure t)

;; move between windows with hjkl
;; (global-set-key (kbd "M-h")  'windmove-left)
;; (global-set-key (kbd "M-j")  'windmove-down)
;; (global-set-key (kbd "M-k")    'windmove-up)
;; (global-set-key (kbd "M-l") 'windmove-right)

;; (global-set-key (kbd "M-i") 'split-window-horizontally)
;; (global-set-key (kbd "M-o") 'split-window-vertically)

;; (global-set-key (kbd "M-1") 'delete-other-windows)
;; (global-set-key (kbd "M-0") 'delete-window)

;; (global-set-key (kbd "C-x g") 'magit-status)

;; http://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs
;; maybe checkout https://github.com/jwiegley/use-package as a better alternative
;; using
;;   (bind-keys*
;;   ("C-o" . other-window)
;;   ("C-M-n" . forward-page)
;;   ("C-M-p" . backward-page))
;; instead of the minor mode variant

;; my keybindings

(defvar my-keybindings-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "M-0") 'delete-window)
    (define-key map (kbd "M-1") 'delete-other-windows)
    (define-key map (kbd "M-2") 'split-window-below)
    (define-key map (kbd "M-3") 'split-window-right)
    (define-key map (kbd "M-S-t") 'toggle-window-split)
    (define-key map (kbd "C-c b") '(lambda () "Switch to last used buffer."
                                     (interactive)
                                     (switch-to-buffer (other-buffer))))
    (define-key map (kbd "C-c C-b") 'buffer-menu-other-window)
    (define-key map (kbd "<M-tab>") 'other-window)
    (define-key map (kbd "C-c o") 'org-agenda)
    (define-key map (kbd "C-c m") 'mu4e)
    (define-key map (kbd "C-c s") 'org-mu4e-store-and-capture)
    (define-key map (kbd "C-c h") 'org-mime-htmlize)
    map))

(define-minor-mode my-keybindings
  "A minor mode to override already assigned keys by other major/minor modes."
  :init-value t)

(my-keybindings)

;; disable custom keybindings in minibuffer
(add-hook 'minibuffer-setup-hook '(lambda () (my-keybindings nil)))


;;; elisp

(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            ;; #'enable-paredit-mode
            (setq indent-tabs-mode nil)))

;; set indentation level
(add-hook 'html-mode-hook
          (lambda ()
            (set (make-local-variable 'sgml-mode-hook) 2)))

(add-hook 'sgml-mode-hook               ;this is also for html
          (lambda ()
            (set (make-local-variable 'sgml-basic-offset) 2)
            (sgml-guess-indent)))

(add-hook 'js-mode
          (setq js-indent-level 2))     ;javascript

(setq css-indent-offset 2)

(add-hook 'sh-mode-hook
            (setq
             sh-indentation 4
             sh-basic-offset 4))


;;; golang

;; go get golang.org/x/tools/cmd/goimports
(setq gofmt-command "goimports") ;https://godoc.org/golang.org/x/tools/cmd/goimports
(add-hook 'before-save-hook 'gofmt-before-save)

;; ;; gocode https://github.com/nsf/gocode
;; (require 'go-autocomplete)          ;requires auto-complete-config
;;                                     ;which is installed with the auto-complete package
;; (ac-config-default)                 ;enable auto-complete with default config
;; ;; (require 'company-go)
;; ;; (setq company-begin-commands '(self-insert-command))

;; go-eldoc https://github.com/syohex/emacs-go-eldoc
(add-hook 'go-mode-hook 'go-eldoc-setup)

;; flycheck uses "go tool vet -all" which doesn't seem to be supported anymore
(setq flycheck-go-vet-executable "go vet -all")


; python
;; (add-hook 'python-mode-hook 'jedi:setup)
;; (add-hook 'python-mode-hook (lambda ()
;;                               (setq jedi:complete-on-dot t
;;                                     jedi:key-goto-definition (kbd "C-c .")
;;                                     jedi:complete (kbd "C-tab"))))


;; https://github.com/robert-zaremba/auto-virtualenvwrapper.el
;; (require 'auto-virtualenvwrapper)
;; (add-hook 'python-mode-hook #'auto-virtualenvwrapper-activate)


;; (add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
;; (add-hook 'python-mode-hook 'yapf-mode)


;;; rust

;; racer installation:
;; rustup component add rust-src
;; cargo install racer

;; rustfmt installation:
;; cargo install rustfmt

; (setq rust-format-on-save t)

; (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
; (add-hook 'rust-mode-hook #'racer-mode)
; (add-hook 'racer-mode-hook #'eldoc-mode)
; (add-hook 'racer-mode-hook #'company-mode)

; (require 'rust-mode)
; (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
; (setq company-tooltip-align-annotations t)

; (require 'racer)
; (define-key racer-mode-map (kbd "C-c .") #'racer-find-definition)
; (define-key racer-mode-map (kbd "C-c ?") #'racer-describe)


;;; orgmode

(setq org-html-postamble nil)
(setq org-agenda-files '("~/org"))
;; (setq org-agenda-files (directory-files-recursively "~" "\.org$"))
(setq org-startup-truncated nil)


(add-to-list 'default-frame-alist
             '(font . "Fira Mono"))

(setq rcirc-server-alist '(("irc.freenode.net" :port 6697 :encryption tls :nick "grafoo")))

;; needed for org-mime-htmlize
;; see mu4e-compose-mode-hook
(use-package org-mime
  :ensure t)

;;; mail with mu4e
(when (file-directory-p "/usr/share/emacs/site-lisp/mu4e")
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
  (require 'mu4e)
  (setq mu4e-hide-index-messages t)

  ;; personal email config
  ;; sample content of .myemail.el configured for an exchange server where
  ;; mu4e indexing is set to a 10 seconds interval
  ;; (setq mu4e-drafts-folder "/Drafts")
  ;; (setq mu4e-sent-folder "/Sent Items")
  ;; (setq mu4e-trash-folder "/Deleted Items")
  ;; (setq mu4e-update-interval 10)
  ;; (setq send-mail-function 'smtpmail-send-it
  ;;       smtpmail-smtp-server "<smtp-server-hostname>"
  ;;       smtpmail-stream-type 'starttls
  ;;       smtpmail-smtp-service 587)
  ;; (setq user-mail-address "someone@example.tld")
  ;; (setq mu4e-user-mail-address-list '("someone@example.tld"))
  (load "~/.myemail.el")

  (require 'org-mu4e)

  ;; workaround when mailserver expects to receive mails encoded as html
  ;; enable only when actually needed
  (add-hook 'mu4e-compose-mode-hook
            (lambda ()
              (local-set-key (kbd "C-c C-c")
                             '(lambda ()
                                (interactive)
                                (org-mime-htmlize)
                                (message-send-and-exit)))))
  (add-hook 'mu4e-headers-mode-hook
            (lambda ()
              (local-set-key
               (kbd "C-c C-l")
               #'org-store-link))))



;;; easypg

;; save a file called .authinfo.gpg with following content
;; machine <hostname> login <username> password <password>
;; when symmetric encryption is choosen e.g. smtpmail
;; will require this passphrase when sending the first message and
;; use the cached passphrase afterwards

;; (epa-file-enable)
;; (setenv "GPG_AGENT_INFO" nil)
;; (setq epa-pinentry-mode 'loopback)
;; (pinentry-start)

; (persp-mode)

; ;; projectile
; ;; (setq projectile-keymap-prefix (kbd "C-c C-p"))
; (projectile-global-mode)


;; frame-resize-pixelwise: use full screen height when maximizing frame vertically
;; auto-save-default: disable autosave files e.g. #foo#
;; make-backup-files: disable backup files e.g. foo~
;; TODO: checkout auto-save-visited-mode


;; utf-8 all the things
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment 'utf-8)

(put 'downcase-region 'disabled nil)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(auto-save-default nil)
 '(blink-cursor-mode nil)
 '(c-basic-offset 4)
 '(delete-selection-mode t)
 '(electric-pair-mode t)
 '(epa-pinentry-mode (quote loopback))
 '(flx-ido-mode t)
 '(frame-resize-pixelwise t)
 '(global-auto-revert-mode t)
 '(global-whitespace-mode t)
 '(ido-enable-flex-matching t)
 '(ido-everywhere t)
 '(ido-mode (quote both) nil (ido))
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(line-number-mode nil)
 '(make-backup-files nil)
 '(menu-bar-mode nil)
 '(org-agenda-files "~/.agenda_files")
 '(org-log-done (quote note))
 '(org-startup-truncated nil)
 '(org-tags-column 0)
 '(package-selected-packages
   (quote
    (tuareg browse-kill-ring org-mime yaml-mode go-eldoc go-mode rust-mode multiple-cursors magit gruvbox-theme flycheck flx-ido expand-region elpy company-quickhelp company clang-format ace-window use-package)))
 '(require-final-newline t)
 '(ring-bell-function (quote ignore))
 '(scroll-bar-mode nil)
 '(show-paren-mode t)
 '(tool-bar-mode nil)
 '(tooltip-mode nil)
 '(truncate-lines nil)
 '(truncate-partial-width-windows nil)
 '(whitespace-global-modes (quote (not eshell-mode)))
 '(whitespace-style (quote (face trailing lines-tail)))
 '(winner-mode t)
 '(x-underline-at-descent-line t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
