;;; .emacs --- silence flycheck

;;; Commentary:
;; ...where the magic is happening

;;; Code:


(if (display-graphic-p)
    (progn
      (tool-bar-mode 0)
      (scroll-bar-mode 0)))

(setq ring-bell-function 'ignore)

(blink-cursor-mode 0)

;; drop straight into the scratch buffer
(setq inhibit-startup-message t)

;; show column number in the mode line
(column-number-mode)

;; auto close characters like e.g. parentheses
(electric-pair-mode)

;; highlight matching pairs of enclosing characters e.g. parentheses
(show-paren-mode)

;; replace selected text when typing
(delete-selection-mode)

;; use the full screen height when vertically maximizing
(setq frame-resize-pixelwise t)

;; underline postition setting for Xorg
(setq x-underline-at-descent-line t)

;; performance improvement when displaying long lines
(setq-default bidi-display-reordering nil)

;; disable autosave files e.g. #foo.txt#
(setq auto-save-default nil)

;; disable backup files e.g. foo.txt~
(setq make-backup-files nil)

;TODO: add auto save
;; (defun save-buffer-when-visiting-file (begin-region end-region text-length-before-change)  ; TODO: make it play nicely with 'gofmt-before-save
;;     "if current buffer is visiting a file trigger basic-save-buffer"
;;     (when (buffer-file-name) (basic-save-buffer)))
;; (add-hook 'after-change-functions 'save-buffer-when-visiting-file)

;; watch files for changes and auto revert matching buffers
(global-auto-revert-mode t)

(setq whitespace-style '(face tabs trailing lines-tail))
(setq whitespace-global-modes '(not eshell-mode))
(global-whitespace-mode)

(setq-default truncate-lines nil)
(setq-default truncate-partial-width-windows nil)
(setq org-startup-truncated nil)

;; un-/redo window changes with ‘C-c <left>’ ‘C-c <right>’
(winner-mode)

;; https://www.emacswiki.org/emacs/ToggleWindowSplit
(defun toggle-window-split ()
  "Transpose a vertical/horizontal window split."
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
	     (next-win-buffer (window-buffer (next-window)))
	     (this-win-edges (window-edges (selected-window)))
	     (next-win-edges (window-edges (next-window)))
	     (this-win-2nd (not (and (<= (car this-win-edges)
					 (car next-win-edges))
				     (<= (cadr this-win-edges)
					 (cadr next-win-edges)))))
	     (splitter
	      (if (= (car this-win-edges)
		     (car (window-edges (next-window))))
		  'split-window-horizontally
		'split-window-vertically)))
	(delete-other-windows)
	(let ((first-win (selected-window)))
	  (funcall splitter)
	  (if this-win-2nd (other-window 1))
	  (set-window-buffer (selected-window) this-win-buffer)
	  (set-window-buffer (next-window) next-win-buffer)
	  (select-window first-win)
	  (if this-win-2nd (other-window 1))))))

(add-hook 'ediff-prepare-buffer-hook #'show-all)

(add-to-list 'auto-mode-alist '("\\.cu\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("SConstruct" . python-mode))
(add-to-list 'auto-mode-alist '("SConscript" . python-mode))

(ido-mode)
(ido-everywhere)
; (require 'flx-ido)
; (flx-ido-mode t)
(setq ido-enable-flex-matching t)


(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)

(defun ensure-packages ()
  "Ensure all third party packages are installed."
  (interactive)
  (package-refresh-contents)
  (dolist (package '(
                     ace-window
                     avy
                     clang-format
                     company
                     company-quickhelp
                     elpy
                     expand-region
                     flx-ido
                     flycheck
                     flycheck-rust
                     go-autocomplete
                     go-eldoc
                     go-mode
                     gruvbox-theme
                     haskell-mode
                     indent-guide
                     magit
                     multiple-cursors
                     org-bullets
                     persp-projectile
                     perspective
                     projectile
                     racer
                     restclient
                     rust-mode
                     use-package
                     wrap-region
                     )
                   )
    (unless (package-installed-p package)
      (package-install package))))

;; show org-mode bullets as utf-8 characters
;; example screenshot at https://github.com/sabof/org-bullets/raw/master/screenshot.png
;; (add-hook 'org-mode-hook (lambda () (org-bullets-mode t)))

(unless (package-installed-p 'use-package)
  (if (with-temp-buffer (url-retrieve-synchronously "http://melpa.org/" t))
      (ensure-packages)))

(use-package ace-window
  :bind ("M-o" . ace-window)
  :config
  (setq aw-dispatch-always t)
  (setq aw-keys '(?f ?j ?d ?k ?s ?l ?a ?g ?h)))

(use-package avy
  ;; TODO: check why avy-got-line keybinding isn't working (as as workaround
  ;; my-keybindings-map is defined for the matching minor mode).
  :bind ("M-j" . avy-goto-char-2))

(use-package clang-format
  :init (add-hook 'c-mode-common-hook
                  '(lambda ()
                     (add-hook 'before-save-hook
                               '(lambda ()
                                  (when
                                      (or (eq major-mode 'c-mode)
                                          (eq major-mode 'c++-mode))
                                    (clang-format-buffer)))))))

(use-package company
  :config (global-company-mode))

(use-package company-quickhelp
  :config (company-quickhelp-mode))



(use-package elpy
  :init (add-hook 'elpy-mode-hook
                  '(lambda ()
                     (add-hook 'before-save-hook #'elpy-format-code)))
  :config (elpy-enable))

(use-package expand-region
  :bind ("M-i" . er/expand-region))

(use-package flx-ido
  :config (flx-ido-mode))

(use-package flycheck
  :config (global-flycheck-mode))

(use-package gruvbox-theme
  :config (load-theme 'gruvbox-light-medium t))

(use-package magit
  :bind ("C-c j" . magit-status))

(use-package multiple-cursors
  :bind (("C-c m i" . mc/edit-lines)
         ("C-c m a" . mc/edit-beginnings-of-lines)
         ("C-c m e" . mc/edit-ends-of-lines)))

(use-package python
  :config (setq gud-pdb-command-name "python -m pdb"))

(use-package racer
  ;; racer installation:
  ;; rustup component add rust-src
  ;; cargo install racer
  )

(use-package rust-mode
  ;; rustfmt installation:
  ;; cargo install rustfmt
  :config (setq rust-format-on-save t)
  )


;; move between windows with hjkl
;; (global-set-key (kbd "M-h")  'windmove-left)
;; (global-set-key (kbd "M-j")  'windmove-down)
;; (global-set-key (kbd "M-k")    'windmove-up)
;; (global-set-key (kbd "M-l") 'windmove-right)

;; (global-set-key (kbd "M-i") 'split-window-horizontally)
;; (global-set-key (kbd "M-o") 'split-window-vertically)

;; (global-set-key (kbd "M-1") 'delete-other-windows)
;; (global-set-key (kbd "M-0") 'delete-window)

;; (global-set-key (kbd "C-x g") 'magit-status)

;; http://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs
;; maybe checkout https://github.com/jwiegley/use-package as a better alternative
;; using
;;   (bind-keys*
;;   ("C-o" . other-window)
;;   ("C-M-n" . forward-page)
;;   ("C-M-p" . backward-page))
;; instead of the minor mode variant

(defvar my-keybindings-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "M-n") 'avy-goto-line)
    (define-key map (kbd "M-0") 'delete-window)
    (define-key map (kbd "M-1") 'delete-other-windows)
    (define-key map (kbd "M-2") 'split-window-below)
    (define-key map (kbd "M-3") 'split-window-right)
    (define-key map (kbd "M-S-t") 'toggle-window-split)
    ;; switch to last used buffer
    (define-key map (kbd "C-c b") '(lambda ()
                                     (interactive)
                                     (switch-to-buffer (other-buffer))))
    ; (define-key map (kbd "C-x m") 'magit-status)
    ; (define-key map (kbd "C-c f") 'company-files)
    ; (define-key map (kbd "M-o") 'ace-window)
    ; (define-key map (kbd "M-j") 'avy-goto-char-2)
    ; (define-key map (kbd "M-h") 'avy-goto-line)
    ; (define-key map (kbd "C-c m i") 'mc/edit-lines)
    ; (define-key map (kbd "C-c m b") 'mc/edit-beginnings-of-lines)
    ; (define-key map (kbd "C-c m e") 'mc/edit-ends-of-lines)
    ; (define-key map (kbd "C-=") 'er/expand-region)
    (define-key map (kbd "<M-tab>") 'other-window)
    map))

(define-minor-mode my-keybindings
  "A minor mode to override already assigned keys by other major/minor modes."
  :init-value t)

(my-keybindings)

;; disable custom keybindings in minibuffer
(add-hook 'minibuffer-setup-hook '(lambda () (my-keybindings nil)))


;;; c

(setq-default c-basic-offset 2)
;; (add-hook 'c-mode-common-hook
;;           '(lambda ()
;;              (add-hook 'before-save-hook
;;                        '(lambda ()
;;                           (when
;;                               (or (eq major-mode 'c-mode)
;;                                   (eq major-mode 'c++-mode))
;;                             (clang-format-buffer))))))


;;; elisp

(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            ;; #'enable-paredit-mode
            (setq indent-tabs-mode nil)))

;; set indentation level
(add-hook 'html-mode-hook
          (lambda ()
            (set (make-local-variable 'sgml-mode-hook) 2)))

(add-hook 'sgml-mode-hook               ;this is also for html
          (lambda ()
            (set (make-local-variable 'sgml-basic-offset) 2)
            (sgml-guess-indent)))

(add-hook 'js-mode
          (setq js-indent-level 2))     ;javascript

(setq css-indent-offset 2)

(add-hook 'sh-mode-hook
            (setq
             sh-indentation 4
             sh-basic-offset 4))


;;; golang

(setq gofmt-command "goimports") ;https://godoc.org/golang.org/x/tools/cmd/goimports
(add-hook 'before-save-hook 'gofmt-before-save)

;; gocode https://github.com/nsf/gocode
(require 'go-autocomplete)          ;requires auto-complete-config
                                    ;which is installed with the auto-complete package
(ac-config-default)                 ;enable auto-complete with default config
;; (require 'company-go)
;; (setq company-begin-commands '(self-insert-command))

;; go-eldoc https://github.com/syohex/emacs-go-eldoc
(add-hook 'go-mode-hook 'go-eldoc-setup)


; python
;; (add-hook 'python-mode-hook 'jedi:setup)
;; (add-hook 'python-mode-hook (lambda ()
;;                               (setq jedi:complete-on-dot t
;;                                     jedi:key-goto-definition (kbd "C-c .")
;;                                     jedi:complete (kbd "C-tab"))))


;; https://github.com/robert-zaremba/auto-virtualenvwrapper.el
;; (require 'auto-virtualenvwrapper)
;; (add-hook 'python-mode-hook #'auto-virtualenvwrapper-activate)


;; (add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
;; (add-hook 'python-mode-hook 'yapf-mode)


;;; rust

;; racer installation:
;; rustup component add rust-src
;; cargo install racer

;; rustfmt installation:
;; cargo install rustfmt

; (setq rust-format-on-save t)

; (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
; (add-hook 'rust-mode-hook #'racer-mode)
; (add-hook 'racer-mode-hook #'eldoc-mode)
; (add-hook 'racer-mode-hook #'company-mode)

; (require 'rust-mode)
; (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
; (setq company-tooltip-align-annotations t)

; (require 'racer)
; (define-key racer-mode-map (kbd "C-c .") #'racer-find-definition)
; (define-key racer-mode-map (kbd "C-c ?") #'racer-describe)


;;; orgmode

(setq org-html-postamble nil)
(setq org-agenda-files '("~/org"))
(setq org-startup-truncated nil)


(add-to-list 'default-frame-alist
             '(font . "Fira Mono"))

(setq rcirc-server-alist '(("irc.freenode.net" :port 6697 :encryption tls :nick "grafoo")))

; ;;; mail with mu4e
; (when (file-directory-p "/usr/share/emacs/site-lisp/mu4e")
;   (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
;   (require 'mu4e)
;   (setq mu4e-hide-index-messages t)

;   ;; personal email config
;   ;; sample content of .myemail.el configured for an exchange server where
;   ;; mu4e indexing is set to a 10 seconds interval
;   ;; (setq mu4e-drafts-folder "/Drafts")
;   ;; (setq mu4e-sent-folder "/Sent Items")
;   ;; (setq mu4e-trash-folder "/Deleted Items")
;   ;; (setq mu4e-update-interval 10)
;   ;; (setq send-mail-function 'smtpmail-send-it
;   ;;       smtpmail-smtp-server "<smtp-server-hostname>"
;   ;;       smtpmail-stream-type 'starttls
;   ;;       smtpmail-smtp-service 587)
;   ;; (setq user-mail-address "someone@example.tld")
;   (load "~/.myemail")

;   (require 'org-mu4e))



; ;;; easypg

; ;; save a file called .authinfo.gpg with following content
; ;; machine <hostname> login <username> password <password>
; ;; when symmetric encryption is choosen e.g. smtpmail
; ;; will require this passphrase when sending the first message and
; ;; use the cached passphrase afterwards
; (epa-file-enable)

; (persp-mode)

; ;; projectile
; ;; (setq projectile-keymap-prefix (kbd "C-c C-p"))
; (projectile-global-mode)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(indent-tabs-mode nil)
 '(menu-bar-mode nil)
 '(org-log-done (quote note))
 '(org-tags-column 0)
 '(package-selected-packages
   (quote
    (sql-indent paredit edit-server yaml-mode company-quickhelp wrap-region restclient racer persp-projectile org-bullets multiple-cursors magit indent-guide haskell-mode gruvbox-theme go-eldoc go-autocomplete flycheck-rust flycheck expand-region elpy clang-format rust-mode go-mode projectile perspective flx-ido ace-window avy use-package)))
 '(safe-local-variable-values
   (quote
    ((bug-reference-bug-regexp . "<https?://\\(debbugs\\|bugs\\)\\.gnu\\.org/\\([0-9]+\\)>"))))
 '(scroll-bar-mode nil)
 '(show-paren-mode t)
 '(tool-bar-mode nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
