;;; .emacs --- silence flycheck

;;; Commentary:
;; ...where the magic is happening

;;; Code:

;;; general

(setq ring-bell-function 'ignore)
(setq inhibit-startup-message t)        ;disable startup message


;;; packages

(require 'package)

(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)

(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

(defvar my-packages
  '(avy
    ace-window
    multiple-cursors
    wrap-region
    evil
    linum-relative
    ;; programming general
    flycheck
    indent-guide
    ;;; python
    elpy
    ;; jedi
    ;; helm-pydoc
    ;; py-autopep8
    ;; auto-virtualenvwrapper
    ;;; org
    org-bullets
    ;;; go
    go-mode
    go-autocomplete
    go-eldoc
    ;; c/c++
    clang-format
    yapfify
    ;;; themes
    dark-mint-theme
    leuven-theme
    doom-themes
    color-theme-sanityinc-tomorrow
    flatui-theme
    ;;; magit
    magit
    evil-magit
    ;;; haskell
    ;; haskell-mode
    helm
    restclient
    ;;; rust
    rust-mode
    flycheck-rust
    racer
    ;;; autocompletion
    company
    auto-complete))

(dolist (p my-packages)
  (unless (package-installed-p p)
    (package-install p)))


;;; file handling

(setq auto-save-default nil) ;disable autosave files e.g. #foobar.txt#
(setq make-backup-files nil) ;disable backup files e.g. foobar.txt~
;; (defun save-buffer-when-visiting-file (begin-region end-region text-length-before-change)  ; todo: make it play nicely with 'gofmt-before-save
;;     "if current buffer is visiting a file trigger basic-save-buffer"
;;     (when (buffer-file-name) (basic-save-buffer)))
;; (add-hook 'after-change-functions 'save-buffer-when-visiting-file)

(global-auto-revert-mode t)             ;watch files for changes and auto revert matching buffer


;;; complete

(add-hook 'after-init-hook 'global-company-mode)


;;; editor/ui settings

(blink-cursor-mode 0)

;; disable all kinds of bars
(if (display-graphic-p)
    (progn
      (tool-bar-mode -1)
      (scroll-bar-mode -1)))
(menu-bar-mode -1)


;; ;;; evil --- vim keybindings ftw

;; (evil-mode t)
;; (setq evil-normal-state-cursor '("orange" hollow)
;;       evil-insert-state-cursor '("orange" box)
;;       evil-visual-state-cursor '("green" hollow))

;; ;; deactivate vim keybindings in insert mode
;; ;; https://gist.github.com/kidd/1828878
;; (setcdr evil-insert-state-map nil)
;; (define-key evil-insert-state-map [escape] 'evil-normal-state)

;; (define-key evil-visual-state-map (kbd "TAB") 'tab-to-tab-stop)

;; (require 'evil-magit)
;; (evil-define-key evil-magit-state magit-mode-map "?" 'evil-search-backward)

;; show org-mode bullets as utf-8 characters
;; example screenshot at https://github.com/sabof/org-bullets/raw/master/screenshot.png
;; (add-hook 'org-mode-hook (lambda () (org-bullets-mode t)))


;; ;; line numbers
;; (global-linum-mode)
;; (require 'linum-relative)
;; (linum-relative-on)

(setq column-number-mode t)
(setq-default tab-width 2) ;display tabs as 2 spaces wide but do not change the actual indentation level
(electric-pair-mode t)     ;auto close characters like e.g. brackets
(show-paren-mode 1)        ;show matching pairs of enclosing characters



;; switch to last used buffer
(global-set-key (kbd "C-c b") '(lambda ()
                                 (interactive)
                                 (switch-to-buffer (other-buffer))))

;; (setq-default show-trailing-whitespace t)
(require 'whitespace)
(setq whitespace-style '(face tabs trailing lines-tail))
(setq whitespace-global-modes '(not eshell-mode))
(global-whitespace-mode t)

(setq-default truncate-lines nil)


;;; theme stuff

;; (setq leuven-scale-outline-headlines nil)
;; (load-theme 'leuven t)
;; (load-theme 'sanityinc-tomorrow-bright t)
;; (load-theme 'doom-one t)
(load-theme 'flatui t)

(setq x-underline-at-descent-line t) ;underline postition setting for Xorg

;; (add-to-list 'default-frame-alist
;;              '(font . "mononoki-11"))
;; (add-to-list 'default-frame-alist
;;              '(font . "Noto Mono-11"))
;; (add-to-list 'default-frame-alist
;;              '(font . "Iosevka Term-12"))
;; (add-to-list 'default-frame-alist
;;              '(font . "Fixedsys Excelsior-12"))
;; (add-to-list 'default-frame-alist
;;              '(font . "Anonymous Pro-12"))
(add-to-list 'default-frame-alist '(font . "Input Sans"))


;;; ide settings

(setq-default indent-tabs-mode nil)


;;; c

(setq-default c-basic-offset 2)
;; (add-hook 'c-mode-common-hook
;;           '(lambda ()
;;              (add-hook 'before-save-hook
;;                        '(lambda ()
;;                           (when
;;                               (or (eq major-mode 'c-mode)
;;                                   (eq major-mode 'c++-mode))
;;                             (clang-format-buffer))))))


;;; elisp

(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            ;; #'enable-paredit-mode
            (setq indent-tabs-mode nil)))

;; set indentation level
(add-hook 'html-mode-hook
          (lambda ()
            (set (make-local-variable 'sgml-mode-hook) 2)))

(add-hook 'sgml-mode-hook               ;this is also for html
          (lambda ()
            (set (make-local-variable 'sgml-basic-offset) 2)
            (sgml-guess-indent)))

(add-hook 'js-mode
          (setq js-indent-level 2))     ;javascript

(setq css-indent-offset 2)

(add-hook 'sh-mode-hook
            (setq
             sh-indentation 2
             sh-basic-offset 2))


;;; golang

(setq gofmt-command "goimports") ;https://godoc.org/golang.org/x/tools/cmd/goimports
(add-hook 'before-save-hook 'gofmt-before-save)

;; gocode https://github.com/nsf/gocode
(require 'go-autocomplete)          ;requires auto-complete-config
                                    ;which is installed with the auto-complete package
;; (ac-config-default)                 ;enable auto-complete with default config

;; go-eldoc https://github.com/syohex/emacs-go-eldoc
(add-hook 'go-mode-hook 'go-eldoc-setup)


;;; flycheck
(global-flycheck-mode)


;;; python

(setq gud-pdb-command-name "python -m pdb")

(elpy-enable)
(add-hook 'elpy-mode-hook (lambda ()
                            (add-hook 'before-save-hook #'elpy-format-code)))

;; (add-hook 'python-mode-hook 'jedi:setup)
;; (add-hook 'python-mode-hook (lambda ()
;;                               (setq jedi:complete-on-dot t
;;                                     jedi:key-goto-definition (kbd "C-c .")
;;                                     jedi:complete (kbd "C-tab"))))


;; https://github.com/robert-zaremba/auto-virtualenvwrapper.el
;; (require 'auto-virtualenvwrapper)
;; (add-hook 'python-mode-hook #'auto-virtualenvwrapper-activate)


;; (add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
;; (add-hook 'python-mode-hook 'yapf-mode)


;;; cuda

(add-to-list 'auto-mode-alist '("\\.cu\\'" . c++-mode))


;;; rust

;; racer installation:
;; rustup component add rust-src
;; cargo install racer

;; rustfmt installation:
;; cargo install rustfmt

(setq rust-format-on-save t)

(add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
(add-hook 'rust-mode-hook #'racer-mode)
(add-hook 'racer-mode-hook #'eldoc-mode)
(add-hook 'racer-mode-hook #'company-mode)

(require 'rust-mode)
(define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
(setq company-tooltip-align-annotations t)

(require 'racer)
(define-key racer-mode-map (kbd "C-c .") #'racer-find-definition)
(define-key racer-mode-map (kbd "C-c ?") #'racer-describe)


;;; build systems

;; scons
(add-to-list 'auto-mode-alist '("SConstruct" . python-mode))
(add-to-list 'auto-mode-alist '("SConscript" . python-mode))


;;; orgmode

(setq org-html-postamble nil)
(setq org-agenda-files '("~/tsk"))
(setq org-startup-truncated nil)


;;; windows

;; ace-window

(set 'aw-dispatch-always t)
(set 'aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))

(winner-mode t)                         ;un-/redo window changes with `C-c left' and `C-c right'

;; https://www.emacswiki.org/emacs/ToggleWindowSplit
(defun toggle-window-split ()
  "Transpose a vertical/horizontal window split."
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
	     (next-win-buffer (window-buffer (next-window)))
	     (this-win-edges (window-edges (selected-window)))
	     (next-win-edges (window-edges (next-window)))
	     (this-win-2nd (not (and (<= (car this-win-edges)
					 (car next-win-edges))
				     (<= (cadr this-win-edges)
					 (cadr next-win-edges)))))
	     (splitter
	      (if (= (car this-win-edges)
		     (car (window-edges (next-window))))
		  'split-window-horizontally
		'split-window-vertically)))
	(delete-other-windows)
	(let ((first-win (selected-window)))
	  (funcall splitter)
	  (if this-win-2nd (other-window 1))
	  (set-window-buffer (selected-window) this-win-buffer)
	  (set-window-buffer (next-window) next-win-buffer)
	  (select-window first-win)
	  (if this-win-2nd (other-window 1))))))

;; move between windows with hjkl
;; (global-set-key (kbd "M-h")  'windmove-left)
;; (global-set-key (kbd "M-j")  'windmove-down)
;; (global-set-key (kbd "M-k")    'windmove-up)
;; (global-set-key (kbd "M-l") 'windmove-right)

;; (global-set-key (kbd "M-i") 'split-window-horizontally)
;; (global-set-key (kbd "M-o") 'split-window-vertically)

;; (global-set-key (kbd "M-1") 'delete-other-windows)
;; (global-set-key (kbd "M-0") 'delete-window)

;; (global-set-key (kbd "C-x g") 'magit-status)

;; http://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs
;; maybe checkout https://github.com/jwiegley/use-package as a better alternative
;; using
;;   (bind-keys*
;;   ("C-o" . other-window)
;;   ("C-M-n" . forward-page)
;;   ("C-M-p" . backward-page))
;; instead of the minor mode variant
(defvar my-keys-map
  (let ((map (make-sparse-keymap)))
    ;; move between windows with hjkl
    ;; (define-key map (kbd "M-h") 'windmove-left)
    ;; (define-key map (kbd "M-j") 'windmove-down)
    ;; (define-key map (kbd "M-k") 'windmove-up)
    ;; (define-key map (kbd "M-l") 'windmove-right)

    ;; (define-key map (kbd "M-i") 'split-window-horizontally)
    ;; (define-key map (kbd "M-o") 'split-window-vertically)
    (define-key map (kbd "M-S-t") 'toggle-window-split)

    (define-key map (kbd "M-1") 'delete-other-windows)
    (define-key map (kbd "M-0") 'delete-window)

    (define-key map (kbd "C-x m") 'magit-status)
    (define-key map (kbd "C-c f") 'company-files)
    (define-key map (kbd "M-o") 'ace-window)
    (define-key map (kbd "M-j") 'avy-goto-char-2)
    (define-key map (kbd "M-h") 'avy-goto-line)
    map))
(define-minor-mode my-keys
  "A minor mode to override already assigned keys by other major/minor modes."
  :init-value t)
(my-keys t)

(defun my-minibuffer-setup-hook ()
  "Disable my-keys minor mode in minibuffer."
  (my-keys nil))
(add-hook 'minibuffer-setup-hook 'my-minibuffer-setup-hook)


;;; redminer

;; (add-to-list 'load-path "~/prj/redminer")
;; (require 'redminer)
;; (add-hook 'org-mode-hook (lambda () (local-set-key (kbd "C-c r") #'redminer-insert-issue-as-org-link)))


;;; restclient
(require 'restclient)


;;; helm
(helm-mode t)
(global-set-key (kbd "C-x C-f") 'helm-find-files)


;; (indent-guide-global-mode)


;;; mail with mu4e
(when (file-directory-p "/usr/share/emacs/site-lisp/mu4e")
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
  (require 'mu4e)
  (setq mu4e-hide-index-messages t)

  ;; personal email config
  ;; sample content of .myemail.el configured for an exchange server where
  ;; mu4e indexing is set to a 10 seconds interval
  ;; (setq mu4e-drafts-folder "/Drafts")
  ;; (setq mu4e-sent-folder "/Sent Items")
  ;; (setq mu4e-trash-folder "/Deleted Items")
  ;; (setq mu4e-update-interval 10)
  ;; (setq send-mail-function 'smtpmail-send-it
  ;;       smtpmail-smtp-server "<smtp-server-hostname>"
  ;;       smtpmail-stream-type 'starttls
  ;;       smtpmail-smtp-service 587)
  ;; (setq user-mail-address "someone@example.tld")
  (load "~/.myemail")

  (require 'org-mu4e))



;;; easypg

;; save a file called .authinfo.gpg with following content
;; machine <hostname> login <username> password <password>
;; when symmetric encryption is choosen e.g. smtpmail
;; will require this passphrase when sending the first message and
;; use the cached passphrase afterwards
(epa-file-enable)


;; (custom-set-faces
;;  ;; custom-set-faces was added by Custom.
;;  ;; If you edit it by hand, you could mess it up, so be careful.
;;  ;; Your init file should contain only one such instance.
;;  ;; If there is more than one, they won't work right.
;;  '(org-level-1 ((t (:background "#23272e" :foreground "#51afef" :weight bold :height 1.0)))))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (multiple-cursors wrap-region ace-window racer flycheck-rust rust-mode restclient helm evil-magit magit flatui-theme color-theme-sanityinc-tomorrow doom-themes leuven-theme dark-mint-theme yapfify clang-format go-eldoc go-autocomplete go-mode org-bullets elpy indent-guide flycheck linum-relative evil))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
